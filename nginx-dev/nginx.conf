user nginx;
# cat /proc/cpuinfo| grep "processor"| wc -l
worker_processes 5;
# ulimit -n
worker_rlimit_nofile 65535;

error_log /dev/fd/2 warn;

pid /var/run/nginx.pid;

events {
    # rlimit/processes
    worker_connections 5120;
    # cat /proc/sys/fs/file-max
    # vs select/poll
    # more FD & NO IO Linear Decline(BETTER IN WAN)
    use epoll;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /dev/fd/1 main;

    client_body_timeout             5m;
    send_timeout                    5m;

    connection_pool_size            4096;
    client_header_buffer_size       4k;
    large_client_header_buffers     4 4k;
    request_pool_size               4k;
    reset_timedout_connection       on;

    # In order to improve the speed of page access, use gzip to zip text/css
    gzip                            on;
    gzip_min_length                 100;
    gzip_buffers                    4 8k;
    gzip_comp_level                 5;
    gzip_types                      text/plain;
    gzip_types                      application/x-javascript;
    gzip_types                      text/css;

    # the cache nginx load from disk.
    # Client data transfer will be delayed until be equal in size
    output_buffers                  128 512k;
    postpone_output                 1460;

    # use aio is directly to read from disk block
    # more about I/O optimizing: https://www.jianshu.com/p/444646e02ef7
    aio                             on;
    directio                        512;

    sendfile                        on;
    client_max_body_size            8m;
    fastcgi_intercept_errors        on;

    # tcp parameters helps to switch in 'delay ack' & 'nagle' algorithm
    tcp_nopush                      on;
    tcp_nodelay                     on;

    keepalive_timeout               75 20;

    ignore_invalid_headers          on;

    server_tokens                   off;

    server {
        listen          80;
        server_name     _;

        access_log      /dev/fd/1 main;
        error_log       /dev/fd/2 notice;

<<<<<<< HEAD
        location /pro {
            # set link to another docker container with name
            proxy_pass         http://pro:5000/;
            proxy_redirect     off;

            # set proxy_header can perform reverse proxy and delivery routing
            proxy_set_header   Host                 $http_host;
            proxy_set_header   X-Real-IP            $remote_addr;
            proxy_set_header   X-Forwarded-For      $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto    $scheme;
        }

        location /dev {
            # set link to another docker container with name
            proxy_pass         http://dev:5000/;
            proxy_redirect     off;

            # set proxy_header can perform reverse proxy and delivery routing
            proxy_set_header   Host                 $http_host;
            proxy_set_header   X-Real-IP            $remote_addr;
            proxy_set_header   X-Forwarded-For      $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto    $scheme;
        }

        location /test {
            # set link to another docker container with name
            proxy_pass         http://test:5000/;
=======
        location / {
            # set link to another docker container with name
            proxy_pass         http://web:5000/;
>>>>>>> 6dc70565149d310250ef20b6b877c2faf7a0873c
            proxy_redirect     off;

            # set proxy_header can perform reverse proxy and delivery routing
            proxy_set_header   Host                 $http_host;
            proxy_set_header   X-Real-IP            $remote_addr;
            proxy_set_header   X-Forwarded-For      $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto    $scheme;
        }
    }
}